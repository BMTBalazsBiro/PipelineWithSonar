default:
  image: bitmist/cicd:latest

stages:
  - validation
  - deploy
  - tagging

Validation:
  extends: .validation-template
  only:
    variables:
      - $CI_COMMIT_TAG == null
    refs:
      - main
      - uat
      - dev
  allow_failure: false

Deploy:
  extends: .quick-deploy-template
  only:
    variables:
      - $CI_COMMIT_TAG == null
    refs:
      - main
      - uat
      - dev
  allow_failure: false
  when: manual
  needs:
    - job: Validation
      artifacts: true

Tagging:
  stage: tagging
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "---- Running the tagging job ----"
  release:
    tag_name: ${CI_COMMIT_BRANCH}_deploy_${CI_COMMIT_SHA}
    name: ${CI_COMMIT_BRANCH}_deploy_${CI_COMMIT_SHA}
    description: 'Successful Deploy'
  only:
    variables:
      - $CI_COMMIT_TAG == null
    refs:
      - main
      - uat
      - dev

.validation-template:
  stage: validation
  script:
    - lastTag=$(git describe --tags --abbrev=0 --match "${CI_COMMIT_BRANCH}*") || true
    - |
      if [ -z "$lastTag" ]; then
        oldestCommit=$(git rev-list --max-parents=0 HEAD | tail -n 1)
        lastCommit=$oldestCommit
      else
        lastCommit=$(git rev-list -n 1 $lastTag)
      fi
    - echo Compare from commitHash $lastCommit
    - sfdx sgd:source:delta --to $CI_COMMIT_SHA --from $lastCommit --output . --include .include
    - |
      if ( grep -q '<types>' ./package/package.xml ) || ( grep -q '<types>' ./destructiveChanges/destructiveChanges.xml ) ; then
        sfdx_auth_url=SFDX_AUTH_URL_${CI_COMMIT_BRANCH^^}
        sfdx_auth_url_value=${!sfdx_auth_url}
        if [ -z "$sfdx_auth_url_value" ]; then
          echo "---- Missing $sfdx_auth_url from CI/CD variables ----"
          exit 1
        fi
        echo sfdx_auth_url $sfdx_auth_url_value
        echo $sfdx_auth_url_value > env.sfdx
        sfdx org:login:sfdx-url --sfdx-url-file env.sfdx --set-default
        resultId=$(sfdx project:deploy:start \
          --manifest package/package.xml \
          --post-destructive-changes destructiveChanges/destructiveChanges.xml \
          --dry-run \
          --ignore-warnings \
          --test-level RunLocalTests \
          --async \
          --json | jq --raw-output '.result.id')
        sfdx project:deploy:resume --job-id $resultId
        echo $resultId > VALIDATED_DEPLOY_REQUEST_ID.txt
        echo "---- Validation Successful ----"
      else
        echo "---- No changes to deploy ----"
      fi
  artifacts:
    paths:
      - VALIDATED_DEPLOY_REQUEST_ID.txt

.quick-deploy-template:
  stage: deploy
  script:
    - sfdx_auth_url=SFDX_AUTH_URL_${CI_COMMIT_BRANCH^^}
    - sfdx_auth_url_value=${!sfdx_auth_url}
    - |
      if [ -z "$sfdx_auth_url_value" ]; then
        echo "---- Missing $sfdx_auth_url from CI/CD variables ----"
        exit 1
      fi
    - echo sfdx_auth_url $sfdx_auth_url_value
    - echo $sfdx_auth_url_value > env.sfdx
    - sfdx org:login:sfdx-url --sfdx-url-file env.sfdx --set-default
    - |
      if [ -s "VALIDATED_DEPLOY_REQUEST_ID.txt" ]; then
        validatedDeployRequestId=$(cat VALIDATED_DEPLOY_REQUEST_ID.txt)
        sfdx force:source:deploy --validateddeployrequestid $validatedDeployRequestId --wait 100 --verbose
      else
        echo "---- No validated deploy request id found in the VALIDATED_DEPLOY_REQUEST_ID.txt artifact ----"
      fi
