name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - uat
      - sit

env:
  CI_COMMIT_SHA: ${{ github.sha }}
  CI_COMMIT_BRANCH: ${{ github.ref_name	 }}
  SFDX_AUTH_URL_MAIN: ${{ secrets.SFDX_AUTH_URL_MAIN }}
  SFDX_AUTH_URL_UAT: ${{ secrets.SFDX_AUTH_URL_UAT }}
  SFDX_AUTH_URL_SIT: ${{ secrets.SFDX_AUTH_URL_SIT }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  Tagging:
    needs: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ github.token }}
          custom_tag: _deploy_${{ github.sha }}
          tag_prefix: ${{ github.ref_name }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_tag }}
          body: 'Successful Deploy'
  Validation:
    runs-on: ubuntu-latest
    container: bitmist/cicd:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install sfdx-git-delta plugin
        run: echo y | sfdx plugins:install sfdx-git-delta
      - name: Run validation script
        run: |
          git config --global --add safe.directory /__w/$REPO_NAME/$REPO_NAME
          regexToMatch="${CI_COMMIT_BRANCH}*"
          echo regexToMatch $regexToMatch
          lastTag=$(git describe --tags --abbrev=0 --match "$regexToMatch") || true
          echo lastTag $lastTag

           if [ -z "$lastTag" ]; then
             oldestCommit=$(git rev-list --max-parents=0 HEAD | tail -n 1)
             lastCommit=$oldestCommit
          else
             lastCommit=$(git rev-list -n 1 $lastTag)
          fi
          echo lastCommit $lastCommit
          echo Compare from commitHash $lastCommit

          sfdx sgd:source:delta --to $CI_COMMIT_SHA --from $lastCommit --output . --include .include
          
          branch_name=$(echo "$CI_COMMIT_BRANCH" | tr '[:lower:]' '[:upper:]')
            echo "branch_name" $branch_name

          if [ "$branch_name" == "MAIN" ]; then
            sfdx_auth_url_value=$SFDX_AUTH_URL_MAIN
          elif [ "$branch_name" == "UAT" ]; then
            sfdx_auth_url_value=$SFDX_AUTH_URL_UAT
          elif [ "$branch_name" == "SIT" ]; then
            sfdx_auth_url_value=$SFDX_AUTH_URL_SIT
          else
            echo "Invalid branch name: $branch_name"
            exit 1
          fi

          echo "sfdx_auth_url_value" $sfdx_auth_url_value

          if [ -z "$sfdx_auth_url_value" ]; then
            echo "---- Missing $sfdx_auth_url from CI/CD variables ----"
            exit 1
          fi
          echo sfdx_auth_url $sfdx_auth_url_value
          echo $sfdx_auth_url_value > env.sfdx
          sfdx org:login:sfdx-url --sfdx-url-file env.sfdx --set-default
          resultId=$(sfdx project:deploy:start \
            --manifest package/package.xml \
            --post-destructive-changes destructiveChanges/destructiveChanges.xml \
            --dry-run \
            --ignore-warnings \
            --test-level RunLocalTests \
            --async \
            --json | jq --raw-output '.result.id')
          echo "resultId" $resultId
          sfdx project:deploy:resume --job-id $resultId
          echo $resultId > VALIDATED_DEPLOY_REQUEST_ID.txt
          echo "---- Validation Successful ----"

#          if ( grep -q '<types>' ./package/package.xml ) || ( grep -q '<types>' ./destructiveChanges/destructiveChanges.xml ) ; then
#
#            branch_name=$(echo "$CI_COMMIT_BRANCH" | tr '[:lower:]' '[:upper:]')
#            echo "branch_name" $branch_name
#
#            if [ "$branch_name" == "MAIN" ]; then
#              sfdx_auth_url_value=$SFDX_AUTH_URL_MAIN
#            elif [ "$branch_name" == "UAT" ]; then
#              sfdx_auth_url_value=$SFDX_AUTH_URL_UAT
#            elif [ "$branch_name" == "SIT" ]; then
#              sfdx_auth_url_value=$SFDX_AUTH_URL_SIT
#            else
#              echo "Invalid branch name: $branch_name"
#              exit 1
#            fi
#
#            echo "sfdx_auth_url_value" $sfdx_auth_url_value
#
#            if [ -z "$sfdx_auth_url_value" ]; then
#              echo "---- Missing $sfdx_auth_url from CI/CD variables ----"
#              exit 1
#            fi
#            echo sfdx_auth_url $sfdx_auth_url_value
#            echo $sfdx_auth_url_value > env.sfdx
#            sfdx org:login:sfdx-url --sfdx-url-file env.sfdx --set-default
#            resultId=$(sfdx project:deploy:start \
#              --manifest package/package.xml \
#              --post-destructive-changes destructiveChanges/destructiveChanges.xml \
#              --dry-run \
#              --ignore-warnings \
#              --test-level RunLocalTests \
#              --async \
#              --json | jq --raw-output '.result.id')
#            sfdx project:deploy:resume --job-id $resultId
#            echo $resultId > VALIDATED_DEPLOY_REQUEST_ID.txt
#            echo "---- Validation Successful ----"
#          else
#            touch VALIDATED_DEPLOY_REQUEST_ID.txt
#            echo "---- No changes to deploy ----"
#          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: request_id_artifact
          path: VALIDATED_DEPLOY_REQUEST_ID.txt

  Deploy:
    runs-on: ubuntu-latest
    needs: Validation
    container: bitmist/cicd:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: request_id_artifact
          path: ./artifact
      - name: Display structure of downloaded files
        run: |
          ls -R
      - name: Run deploy script
        run: |
      
          
          branch_name=$(echo "$CI_COMMIT_BRANCH" | tr '[:lower:]' '[:upper:]')
          echo "branch_name" $branch_name

          if [ "$branch_name" == "MAIN" ]; then
            sfdx_auth_url_value=$SFDX_AUTH_URL_MAIN
          elif [ "$branch_name" == "UAT" ]; then
            sfdx_auth_url_value=$SFDX_AUTH_URL_UAT
          elif [ "$branch_name" == "SIT" ]; then
            sfdx_auth_url_value=$SFDX_AUTH_URL_SIT
          else
            echo "Invalid branch name: $branch_name"
            exit 1
          fi

          if [ -z "$sfdx_auth_url_value" ]; then
            echo "---- Missing $sfdx_auth_url from CI/CD variables ----"
            exit 1
          fi
          echo sfdx_auth_url $sfdx_auth_url_value
          echo $sfdx_auth_url_value > env.sfdx
          
          cat ./artifact/VALIDATED_DEPLOY_REQUEST_ID.txt
          validatedDeployRequestId=$(cat ./artifact/VALIDATED_DEPLOY_REQUEST_ID.txt)
          
          if [ -z "$validatedDeployRequestId" ]; then
            echo "---- No validated deploy request id found in the VALIDATED_DEPLOY_REQUEST_ID.txt artifact ----"
            exit 1
          else
            sfdx org:login:sfdx-url --sfdx-url-file env.sfdx --set-default
            sfdx force:source:deploy --validateddeployrequestid $validatedDeployRequestId --wait 100 --verbose
          fi
        shell: bash
